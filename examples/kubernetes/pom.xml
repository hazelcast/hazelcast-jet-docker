<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>docker</artifactId>
        <groupId>com.hazelcast.jet.samples</groupId>
        <version>4.1</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>kubernetes</artifactId>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <finalName>rolling-aggregation</finalName>
                    <outputDirectory>${project.build.directory}/bundle</outputDirectory>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                            <mainClass>TradingVolume</mainClass>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>com.hazelcast.jet</groupId>
            <artifactId>hazelcast-jet</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <!--
            ~ Jib builds Docker and OCI images for Java applications. It is available as
            ~ plugins for Maven and Gradle and as a Java library. For more
            ~ information about Jib check out official Github repository at
            ~ https://github.com/GoogleContainerTools/jib
            -->
            <id>jib</id>
            <dependencies>
                <dependency>
                    <groupId>com.hazelcast</groupId>
                    <artifactId>hazelcast-kubernetes</artifactId>
                    <version>1.3.1</version>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.google.cloud.tools</groupId>
                        <artifactId>jib-maven-plugin</artifactId>
                        <version>1.3.0</version>
                        <configuration>
                            <from>
                                <image>registry.hub.docker.com/hazelcast/hazelcast-jet:latest-snapshot</image>
                            </from>
                            <to>
                                <!--
                                ~ Check out https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin#configuration
                                ~ for target registry/image configuration.
                                ~
                                ~ Excerpt from Jib Configuration:
                                ~ Using Google Container Registry (GCR)...
                                ~ Make sure you have the docker-credential-gcr
                                ~ command line tool. Jib automatically uses
                                ~ docker-credential-gcr for obtaining credentials.
                                ~ See Authentication Methods for other ways of authenticating.
                                ~
                                ~ For example, to build the image gcr.io/my-gcp-project/my-app,
                                ~ the configuration would be:
                                ~
                                ~ <to>
                                ~   <image>gcr.io/my-gcp-project/my-app</image>
                                ~ </to>
                                ~
                                ~ Using Amazon Elastic Container Registry (ECR)...
                                ~ Make sure you have the docker-credential-ecr-login
                                ~ command line tool. Jib automatically uses
                                ~ docker-credential-ecr-login for obtaining credentials.
                                ~ See Authentication Methods for other ways of authenticating.
                                ~
                                ~ For example, to build the image aws_account_id.dkr.ecr.region.amazonaws.com/my-app,
                                ~ the configuration would be:
                                ~
                                ~ <to>
                                ~   <image>aws_account_id.dkr.ecr.region.amazonaws.com/my-app</image>
                                ~ </to>
                                ~
                                ~ Using Docker Hub Registry...
                                ~ Make sure you have a docker-credential-helper set up.
                                ~ For example, on macOS, the credential helper would be
                                ~ docker-credential-osxkeychain. See Authentication
                                ~ Methods for other ways of authenticating.
                                ~
                                ~ For example, to build the image my-docker-id/my-app,
                                ~ the configuration would be:
                                ~
                                ~ <to>
                                ~   <image>registry.hub.docker.com/my-docker-id/my-app</image>
                                ~ </to>
                                -->
                                <image>rolling-aggregation</image>
                            </to>
                            <extraDirectories>
                                <paths>
                                    <path>${project.build.directory}/bundle</path>
                                </paths>
                            </extraDirectories>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>dockerBuild</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>


</project>
